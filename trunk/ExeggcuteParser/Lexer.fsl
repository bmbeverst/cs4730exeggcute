{
module Lexer
open System
open Parser
open Microsoft.FSharp.Text.Lexing

let lexeme lexbuf =
    LexBuffer<char>.LexemeString lexbuf
}

// These are some regular expression definitions
let digit = ['0'-'9']
let word = ['a'-'z']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let any = '.'

rule tokenize = parse
| (newline+)?eof { EOF }
| whitespace	 { SPACE }
| newline+       { ALSO }
| ","            { COMMA }
| "("			 { LPAREN }
| ")"			 { RPAREN }

| ['-']?digit+('.'digit+)?	{ FLOAT (Single.Parse(lexeme lexbuf)) }
| word+ { STRING (lexeme lexbuf) }
| _ { STRING (lexeme lexbuf) }
